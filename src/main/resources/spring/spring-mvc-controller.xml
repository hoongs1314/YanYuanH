<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-3.2.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/mvc
    	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- 对项目中的所有类进行扫描以完成Bean创建并进行自动注入。
           支持 @Controller、@Service 以及 @Repository 和 @Component -->
           
	<!-- 扫描项目中com.fh.shop.controller包下所有的类，从而使类中的@Controller注解生效 -->
    <context:component-scan base-package="com.Beam.controller"/>

    <!--开启注解驱动主要是使，我们responseBody注解生效-->
    <mvc:annotation-driven/>

    <!--登陆的拦截器-->
    <!--<mvc:interceptors>
        <mvc:interceptor>
            &lt;!&ndash; 拦截 User 下的所有请求 &ndash;&gt;
            <mvc:mapping path="/User/**" />
            &lt;!&ndash;	&lt;!&ndash;&lt;!&ndash; 自定义拦截器类 &ndash;&gt;&ndash;&gt;&ndash;&gt;
            <bean class="com.fh.interceptor.LoginInterceptor">
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>-->


    <!--&lt;!&ndash; 配置拦截器 &ndash;&gt;-->
    <!--<mvc:interceptors>-->
        <!--<mvc:interceptor>-->
            <!--&lt;!&ndash; 拦截所有mvc控制器 &ndash;&gt;-->
            <!--<mvc:mapping path="/**"/>-->
            <!--&lt;!&ndash; mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在-->
                <!--LoginInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) &ndash;&gt;-->
            <!--<mvc:exclude-mapping path="/login/login.zepc" />-->
            <!--<mvc:exclude-mapping path="/login/code.zepc" />-->
            <!--<mvc:exclude-mapping path="/login/loginOut.zepc" />-->
            <!--<bean class="com.Beam.interceptor.LoginInterceptor"></bean>-->
        <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->

	<!--
        jsp视图解析器，对模型视图名称的解析，即在模型视图名称添加前后缀
        如/view/welcome.jsp对应的视图名就是：welcome
        这个类在视图解析器链中一定要定义在其他视图的后面，因为它始终会返回一个视图
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--AOP切面类-->
   <!-- <bean id="logAspect" class="com.fh.aspect.LogAspect"></bean>
    <aop:config>
        <aop:aspect ref="logAspect">
            <aop:pointcut id="logPointcut" expression="execution(* com.fh.controller..*.*(..))"></aop:pointcut>
            <aop:around method="doLog" pointcut-ref="logPointcut"></aop:around>
        </aop:aspect>
    </aop:config>-->

    <!--图片上传-->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> <!--允许上传文件大小 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!--最大内存大小-->
        <property name="maxInMemorySize" value="10240" />
        <!--最大文件大小，-1为不限制大小-->
        <property name="maxUploadSize" value="-1" />
    </bean>
</beans>